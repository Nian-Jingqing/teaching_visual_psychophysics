function [handleFig,bhat] = basic_disc_plot(behavior,flagFit)
%%%%%%%%%%
%
% This function plots behavioral data generated by
% "basic_disc.m". It takes 2 input arguments:
%
% Argument 1: The N-by-3 "behavior" matrix generated by
% program "basic_disc.m". Note that '-1' in that matrix
% indicates trials on which there was no response (probably
% a response timeout).
%
% Argument 2: A flag.  If '1', a cumulative Gaussian is fit
% to the data; if '0', no fit, just a plot of data points.
% Note that the fitting is basic -- it's an ordinary least-
% squares fit without weighting of any kind.
%
% Two variables are output: a figure handle, which you're
% unlikely to need, and a 2-dimensional vector, bhat, which
% contains the fitted parameters. If a fit was performed,
% that is, otherwise, bhat will contain NaNs.
%
% v1.0 20140130 Luke Hallum
% v1.1 20150220 Luke Hallum
%               Minor change -- Input 'behavior' now contains absolute
%               orientations of stimuli, e.g., -35 deg to 55 deg. Here, give
%               indices to fit, but label x-axis with absolute orientations.
%%%%%%%%%%

% Weed out any '-1' rows of the behavior matrix, indicating
% that there was no response on that trial.
behavior = behavior(behavior(:,3) ~= -1,:);

% Populate a matrix of stimulus 'levels' against response
% "CW".
handleFig = figure; hold on
levels__ = sort(unique(behavior(:,1)));
levels = 1:length(levels__);
pcw = [];
for iilev = 1:length(levels)
  ix = find(behavior(:,1) == levels__(iilev));
  pcw(end+1,:) = [levels__(iilev) sum(behavior(ix,2)) / length(ix)];
end

% If we're fitting, do that first so that points sit on top
% of the curve.

% Plot data here.
plot(levels__(:,1),pcw(:,2),'sk','MarkerFaceColor','k','MarkerSize',4); axis square
%
if (flagFit == 1)
  % Cumulative Gaussian fit: Note that the fitting is in a fixed x space
  % 1:length(levels__) but the plotting is in the actual orientation space, this is 
  % very non-intuative
  fnCumGauss2 = @(beta,x) 0.5*(erf(beta(1)*(x - beta(2))) + 1);
  fnObjective = @(beta) sum(power(fnCumGauss2(beta,transpose(levels)) - pcw(:,2),2));
  BETA0 = [1 median(levels)];
  bhat = fminsearch(fnObjective,BETA0);
  levels_ = linspace(levels(1),levels(end),1000); % fitting space
  levels__x = linspace(levels__(1,1),levels__(end,1),1000); % plotting space
  hold on;
  plot(levels__x,fnCumGauss2(bhat,levels_),'-b','LineWidth',1);  
else
  bhat = [nan nan]; % No fit? NaNs.
end
set(gca,'FontSize',8);
xlabel_numbers = min(levels__):range(levels__)/2:max(levels__);
sprintf('%3.1f|',xlabel_numbers);
set(gca,'XTick',xlabel_numbers,'XTickLabel',sprintf('%3.1f|',xlabel_numbers));
xlabel('Test orientation');
ylabel(sprintf('Proportion of responses \"clockwise\"'))

return;
